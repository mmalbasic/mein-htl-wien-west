{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "PostgresConnection": "Server=152.53.33.60;Port=5432;Database=meinhtlwienwest;User Id=cerasisadm;Password=!.S0m3th1ng?18"
  },
  "DBQueries": [
    {
      "Name": "get_user_permissions",
      "Statement": "SELECT p.permission from client_privilege cp join privilege p on cp.privilege_id=p.id where cp.user_id = @UserId"
    },
    {
        "Name": "get_user_id",
        "Statement": "SELECT id FROM client WHERE email = @Email"
    },
    {
        "Name": "get_user_email",
        "Statement": "SELECT email From client WHERE id = @Id"
    },
    {
        "Name": "get_users_id_from_notify_catagory",
        "Statement": "select c.id from client c left join client_notify cn on cn.clientid = c.id where cn.categoryid = (select pc.id from problem_category pc where pc.title like @Category);"
    },
    {
      "Name": "refresh_last_login",
      "Statement": "UPDATE client SET last_login = @LastLogin WHERE email = @Email"
    },
    {
      "Name": "add_new_user",
      "Statement": "INSERT INTO client VALUES (DEFAULT, @Email, @LastLogin)"
    },
    {
      "Name": "add_privilege",
      "Statement": "INSERT INTO client_privilege VALUES (@UserId, @PrivilegeId)"
    },
    {
      "Name": "is_new_user",
      "Statement": "SELECT CAST(CASE WHEN EXISTS (SELECT 1 FROM client WHERE email = @Email) THEN 0 ELSE 1 END as BOOLEAN)"
    },
    {
      "Name": "upload_problem_image",
      "Statement": "INSERT INTO problem_images VALUES (DEFAULT, @ProblemId, @Image)"
    },
    {
      "Name": "post_problem",
      "Statement": "INSERT INTO problem VALUES (DEFAULT, @Priority, @Title, @Description, (SELECT id from problem_category WHERE title = @Category), @ClientId, @Floor, point(@XCoord, @YCoord), @Status, @Timestamp) RETURNING id as new_problem_id"
    },
    {
      "Name": "get_tickets",
      "Statement": "SELECT p.id, p.title, (SELECT title FROM problem_category WHERE id = p.category_id) as category, priority, description, status, floor, coordinate as problem_marker, (SELECT email FROM client WHERE id = p.client_id) as client_email, p.ts_modified as timestamp, pi.img FROM problem p LEFT JOIN problem_images pi ON p.id=pi.problem_id ORDER BY ts_modified DESC LIMIT 100"
    },
    {
      "Name": "get_ticket_images",
      "Statement": "SELECT problem_id, img FROM problem_images"
    },
    {
      "Name": "set_ticket_status",
      "Statement": "UPDATE problem SET status = @Status, ts_modified = @LastModified WHERE id = @Id"
    },
    {
      "Name": "get_ticket_by_id",
      "Statement": "SELECT p.id, p.title, (SELECT title FROM problem_category WHERE id = p.category_id) as category, priority, description, status, floor, coordinate as problem_marker, (SELECT email FROM client WHERE id = p.client_id) as client_email, p.ts_modified as timestamp, pi.img FROM problem p LEFT JOIN problem_images pi ON p.id=pi.problem_id WHERE p.id = @Id"
    },
    {
      "Name": "get_comments_for_problem",
      "Statement": "SELECT p.*, c.* FROM problem p LEFT JOIN comment c ON c.problem_id=p.id"
    },
    {
      "Name": "post_comment_for_problem",
      "Statement": "INSERT INTO comment VALUES (DEFAULT, @EditTimestamp, null, @Text, null, @ProblemId)"
    },
    {
      "Name": "edit_comment_problem",
      "Statement": "UPDATE comment SET text = @Text WHERE id = @Id"
    }

  ]
  
}
