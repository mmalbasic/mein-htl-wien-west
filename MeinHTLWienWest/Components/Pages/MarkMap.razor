@page "/karte-markieren"
@inject IJSRuntime JS
@inject NavigationManager navManager

<PageTitle>Problemort markieren</PageTitle>

<!-- Umschließendes Div mit lila Hintergrund -->
<div class="page-bg d-flex flex-column align-items-center pt-4 pb-4">

    <!-- Überschrift / Beschreibung -->
    <div class="container-fluid text-center">
        <h3 class="text-white mb-3">Karte / Etagenauswahl</h3>
        <p class="text-white mb-4">Wähle ein Stockwerk aus:</p>
        <div id="image-container" class="@(cssState)" @ref="imageContainer" style="background-color:#00000044" @onclick="AddMarker">
            <Panzoom>
                <img @ref="@context.ElementReference"
                src="resource/@(mapPaths[selectedFilter]).png"
                alt="image"/>
            </Panzoom>
            <div class="marker" style="display: @(Helper.ProblemMarker.X == 0 ? "none" : "block");left:@Helper.ProblemMarker.X.ToString().Replace(',','.')%; top:@Helper.ProblemMarker.Y.ToString().Replace(',','.')%;"></div>
        </div>
    </div>

    <div class="toggle-container">
        @if (showFloors)
        {
            <div class="floorselection">
                <button class="btn btn-dark floorselectionbtn" @onclick="@(() => SelectFilter("Dachgeschoss"))">Dachgeschoss</button>
                <button class="btn btn-dark floorselectionbtn" @onclick="@(() => SelectFilter("3. Stock"))">3. Stock</button>
                <button class="btn btn-dark floorselectionbtn" @onclick="@(() => SelectFilter("2. Stock"))">2. Stock</button>
                <button class="btn btn-dark floorselectionbtn" @onclick="@(() => SelectFilter("1. Stock"))">1. Stock</button>
                <button class="btn btn-dark floorselectionbtn" @onclick="@(() => SelectFilter("Erdgeschoss"))">Erdgeschoss</button>
                <button class="floorselectionbtn btn btn-dark" @onclick="@(() => SelectFilter("Untergeschoss"))">Untergeschoss</button>
            </div>
        }
        <button class="floorbtn btn btn-dark" @onclick="ShowFloors">@selectedFilter</button>
    </div>

    <div class="bottom-button-container">
        <button class="btn wide-btn" @onclick="@(() => navManager.NavigateTo("/neue-meldung"))">Zurück</button>
    </div>
</div>

<style>
    .wide-btn {
    width: 35vw;
    height: 60px;
    font-size: 24px;
    border-radius: 5px;
    margin-top: -25vh;
    background-color: #3a148c;
    color: white;
    }
    .bottom-button-container {
    position: absolute;
    bottom: 20px; /* Near the bottom of the screen */
    left: 50%;
    transform: translateX(-50%);
    width: 90%;
    max-width: 600px;
    display: flex;
    justify-content: center;
    }
    html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    background-color: #4e148c;
    overflow: hidden;
    }

    .img, .img-out {
    transition: 0.3s ease-in-out;
    margin-top:0%;
    }
    .img-out {
    margin-top: 100%;
    }
    .img-in {
    margin-top: -100%;
    }

    .page-bg {
    min-height: 100vh;
    width: 100%;
    background-color: #4e148c;
    margin: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    }


    #image-container {
    position: relative;
    width: 100%;
    height: auto; 
    overflow: hidden;
    }

    #zoomable-image {
    width: 100%;
    height: auto;
    }

    .marker {
    position: absolute;
    width: 15px;
    height: 15px;
    background-color: red;
    border-radius: 50%;
    transform: translate(-50%, -50%);
    cursor: pointer;
    }

    .toggle-container {
    position: fixed;
    bottom: 60px; 
    left: 50%;
    transform: translateX(-50%);
    width: 90%;
    max-width: 600px;
    display: flex;
    flex-direction: column;
    align-items: center;
    }

    .floorbtn {
    width: 100vw;
    height: 65px;
    text-align: left;
    font-size: 24px;
    margin: 0;
    padding: 0 10px;
    }


    .floorselection {
    display: flex;
    flex-direction: column;
    width: 100%;
    }

    .floorselectionbtn {
    width: 100%;
    height: 50px;
    text-align: left;
    font-size: 24px;
    padding: 0 10px;
    border-radius: 0;
    }

    .problem-card {
    background: rgba(50, 50, 50, 0.7);
    border: none;
    border-radius: 10px;
    box-shadow: 5px 20px 50px rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(10px);
    width: 90%;
    max-width: 600px;
    }


</style>

@code
{
    private ElementReference imageContainer;

    private bool showFloors = false;
    private string cssState = "img";

    private void ShowFloors()
    {
        showFloors = !showFloors;
    }

    private Dictionary<string, string> mapPaths = new Dictionary<string, string>() {
        { "Untergeschoss", "EU-Bitmap"},
        { "Erdgeschoss", "EG-Bitmap" },
        { "1. Stock", "E1-Bitmap" },
        { "2. Stock", "E2-Bitmap" },
        { "3. Stock", "E3-Bitmap" },
        { "Dachgeschoss", "ED-Bitmap" },
    };

    private string selectedFilter = "Erdgeschoss";
    private async void SelectFilter(string filter)
    {
        ShowFloors();
        if (selectedFilter == filter)
            return; // no transition needed.
        cssState = "img-out";
        await Task.Delay(300);
        cssState = "img-in";
        StateHasChanged();
        await Task.Delay(100);
        selectedFilter = filter;
        cssState = "img";
        StateHasChanged();
    }

    private async Task AddMarker(MouseEventArgs e)
    {
        var rect = await JS.InvokeAsync<DomRect>("getImageContainerRect", "image-container");

        double x = ((e.ClientX - rect.Left) / rect.Width) * 100;
        double y = ((e.ClientY - rect.Top) / rect.Height) * 100;

        x = Math.Clamp(x, 0, 100);
        y = Math.Clamp(y, 0, 100);

        Helper.ProblemMarker = new Marker() { X = x, Y = y };
        StateHasChanged();
    }
}
